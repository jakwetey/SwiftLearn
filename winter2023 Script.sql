-------01/17/2023------
-----DDL - Data Definition Language
--CREATE - Used to create a new database object such as a table, view, index, or procedure
--ALTER - Used to modify an existing database object
--DROP - Used to delete an existing database object
--TRUNCATE - Used to remove all data from a table, but keep the table structure

--SYNTAX
--CREATE DATABASE DATABASE_NAME

--CREATING  HOSPITAL DATABASE
CREATE DATABASE HOSPITAL_DB;

-----SQL DATATYPES
--INTEGER/ INT 
--FLOAT 
--VARCHAR() 
--CHAR()
--NVARCHAR()
--NCHAR()
--DATE 
--BOOLEAN 

----SQL CONSTRAINTS
--NOT NULL - Ensures that a column cannot have a null value
--PRIMARY KEY - Uniquely identifies each row in a table and cannot have null values.
--FOREIGN KEY - Enforces a link OR relationship between the data in two tables
--UNIQUE - Ensures that all values in a column are distinct
--CHECK - Ensures that the value in a column meets a specific condition
--DEFAULT - Provides a default value for a column when no value is specified 


--PATIENTS
--APPOINTMENTS
--THERAPISTS

--SYNTAX
CREATE TABLE TABLE_NAME
(
COLUMN1  DATATYPE CONSTRAINT,
COULUMN2 DATATYPE CONSTRAINT,
COLUMN3  DATATYPE CONSTRAINT,
COULUMN4 DATATYPE CONSTRAINT,
COLUMN5  DATATYPE CONSTRAINT
);

---CREATING PATIENTS TABLE
CREATE TABLE PATIENTS
(
PATIENT_ID INTEGER IDENTITY(1000, 1),
FIRST_NAME VARCHAR(50) NOT NULL,
LAST_NAME VARCHAR(50) NOT NULL,
DOB DATE NOT NULL,
PHONE CHAR(10) NOT NULL,
EMAIL VARCHAR(100) NULL,
STATE CHAR(2) NULL
);

--SYNTAX
--ALTER TABLE TABLE_NAME
--ADD CONSTRAINT CONSTRAINT_NAME PRIMARY KEY(COULUMN);

---ADDING PK CONSTRAINT
ALTER TABLE PATIENTS
ADD CONSTRAINT PK_PATIENTS_PATIENT_ID PRIMARY KEY (PATIENT_ID);

--CREATING APPOINTMENTS TABLE
CREATE TABLE APPOINTMENTS
(
APPOINTMENT_ID INTEGER IDENTITY(100, 3),
PATIENT_ID INTEGER NOT NULL,
THERAPIST_ID INTEGER NOT NULL,
APPOINTMENT_DATE DATE NOT NULL
);

--- ADDING PK CONSTRAINT
ALTER TABLE APPOINTMENTS
ADD CONSTRAINT PK_APPOINTMENTS_APPOINTMENT_ID PRIMARY KEY(APPOINTMENT_ID)

USE HOSPITAL_DB;

--CREATING THERAPIST TABLE
CREATE TABLE THERAPISTS
(
THERAPIST_ID INTEGER IDENTITY(1,1),
FIRST_NAME VARCHAR(50) NOT NULL,
LAST_NAME VARCHAR(50) NOT NULL,
PHONE CHAR(10) NOT NULL,
EMAIL VARCHAR(100) NOT NULL
);

ALTER TABLE THERAPISTS
ADD CONSTRAINT PK_THERAPISTS_THERAPIST_ID PRIMARY KEY(THERAPIST_ID);


--------01/18/2023-------
--SYTAX
--ALTER TABLE CHILD_TABLE_NAME
--ADD CONSTRAINT CONSTRAINT_NAME FOREIGN KEY(COLUMN)
--REFERENCES PARENT_TABLE_NAME(COLUMN);

--ADDING FK CONSTRAINTS TO APPOINTMENTS TABLE
ALTER TABLE APPOINTMENTS
ADD CONSTRAINT FK_APPOINTMENTS_PATIENT_ID FOREIGN KEY(PATIENT_ID)
REFERENCES PATIENTS(PATIENT_ID);

ALTER TABLE APPOINTMENTS
ADD CONSTRAINT FK_APPOINTMENTS_THERAPIST_ID FOREIGN KEY(THERAPIST_ID)
REFERENCES THERAPISTS(THERAPIST_ID);

---ADDING A UNIQUE CONSTRAINT TO PHONE
ALTER TABLE PATIENTS
ADD CONSTRAINT UQ_PATIENTS_PHONE UNIQUE(PHONE);

--- ADDING A CHECK CONSTRAINT TO PHONE TO VERIFY PHONE NUMBER LENGHT
ALTER TABLE PATIENTS
ADD CONSTRAINT CK_PATIENTS_PHONE CHECK (LEN(PHONE) = 10);

--ADDING SSN COLUMN TO PATIENT TABLE
ALTER TABLE PATIENTS
ADD SSN CHAR(9) NOT NULL;

-- MODIFYING SSN DATATYPE A
ALTER TABLE PATIENTS
ALTER COLUMN SSN VARCHAR(9) NULL;

---DROP
CREATE TABLE THERAPISTS1
(
THERAPIST_ID INTEGER IDENTITY(1,1),
FIRST_NAME VARCHAR(50) NOT NULL,
LAST_NAME VARCHAR(50) NOT NULL,
PHONE CHAR(10) NOT NULL,
EMAIL VARCHAR(100) NOT NULL
);

---SYNTAX
--DROP TABLE
--DROP TABLE TABLE_NAME;

----DROP COLUMN
--ALTER TABLE TABLE_NAME
--DROP COLUMN COLUMN_NAME;

-- DROPPING FIRST NAME COLUMN
ALTER TABLE THERAPISTS1
DROP COLUMN FIRST_NAME, LAST_NAME;

--DROPPING THERAPISTS1 TABLE
DROP TABLE THERAPISTS1;

-- DROPPING PATIENT ID FK
ALTER TABLE APPOINTMENTS
DROP CONSTRAINT FK_APPOINTMENTS_PATIENT_ID;

--RENAMING OBJECTS
--SP_RENAME

--RENAMING PATIENTS TO PATIENT
EXEC SP_RENAME 'PATIENTS', 'PATIENT';

--RENAMING PHONE TO PHONE_NUMBER
EXEC SP_RENAME 'PATIENT.PHONE', 'PHONE_NUMBER', 'COLUMN';

--REMOVING UNIQUE CONSTRAINT FROM PHONE
ALTER TABLE PATIENT
DROP CONSTRAINT UQ_PATIENTS_PHONE;

ALTER TABLE PATIENT
DROP CONSTRAINT CK_PATIENTS_PHONE;

---INDEXES
---INDEXES ARE USED TO RETRIEVE DATA FROM DATABASES MORE QUICK, THEY HELP SPEED UP QUERIES.
----CLUSTERED 
--Whenever you apply clustered indexing in a table, it will perform sorting 
--in that table only. You can create only one clustered index in a table like primary key.
--Clustered index is as same as dictionary where the data is arranged by alphabetical order. 
--If you apply primary key to any column, then automatically it will become clustered index. 

----NONCLUSTERED
--is similar to the index of a book. The index of a book consists of a chapter name and page number, 
--if you want to read any topic or chapter then you can directly go to that page by using index of
-- that book. No need to go through each and every page of a book. 

--SYNTAX
--CREATE <CLUSTERED / NONCLUSTERED> INDEX_NAME
--ON TABLE_NAME(COLUMN);

---CREATING CLUSTERED INDEX ON FIRSTNAME COLUMN
CREATE CLUSTERED INDEX IDX_PATIENT_FIRST_NAME
ON PATIENT(FIRST_NAME);


---CREATING NONCLUSTERED INDEX ON FIRSTNAME COLUMN
CREATE NONCLUSTERED INDEX IDX_PATIENT_FIRST_NAME
ON PATIENT(FIRST_NAME);

--- DROPPING INDEX ON PATIENT TABLE
DROP INDEX PATIENT.IDX_PATIENT_FIRST_NAME;

DROP INDEX IDX_PATIENT_FIRST_NAME
ON PATIENT;
