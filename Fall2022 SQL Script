-----09/07/2022-----
---DATA DEFINITION LANGUAGE (DDL)
-- CREATE -- create databases/ tables/ schemas
---ALTER -- modify an existing table
---DROP --- remove or delete an entire table or constraint
---TRUNCATE -- removes all the records from a table but maintains the 
			-- structure.

---SYNTAX
-- CREATE DATABASE DATABASE_NAME;

--CREATING DATABASE STORE_DB
CREATE DATABASE STORE_DB;

--SYNTAX
--CREATE TABLE TABLE_NAME
--(
--COLUM1 DATATYPE CONSTRAINT,
--COLUMN2 DATATYPE COSTRAINT,
--COLUM3 DATATYPE CONSTRAINT,
--COLUMN4 DATATYPE COSTRAINT,
--....
--);

USE STORE_DB;

-- CREATING CUSTOMER TABLE
CREATE TABLE CUSTOMER
(
CUST_ID INTEGER NOT NULL,
F_NAME VARCHAR(50) NOT NULL,
L_NAME VARCHAR(50) NOT NULL,
DOB DATE NULL,
CITY VARCHAR(50) NOT NULL,
STATE CHAR(2) NOT NULL,
GENDER CHAR(1) NULL,
PHONE CHAR(10) NOT NULL
);

-- PRIMARY KEY IS A COLUMN OR A COMBINATION COLUMNS THAT IS 
--USED TO UNIQUELY IDENTIFY RECORDS IN A TABLE.

--SYNTAX
--ALTER TABLE TABLE_NAME
--ADD CONSTRAINT CONSTRAINT_NAME PRIMARY KEY(COLUMN);

-- ADDING PK CONSTRAINT TO CUSTOMER TABLE
ALTER TABLE CUSTOMER
ADD CONSTRAINT PK_CUSTOMER_CUST_ID PRIMARY KEY (CUST_ID);

--CREATING TABLE PRODUCT
CREATE TABLE PRODUCT
(
PROD_ID INTEGER IDENTITY(1000, 1),
P_NAME VARCHAR(20) NOT NULL,
PRICE MONEY NOT NULL,
SUPPLIER VARCHAR(20) NULL,
QUANTITY INTEGER NOT NULL
);

-- ADDING PRIMARY KEY TO PRODUCT TABLE
ALTER TABLE PRODUCT
ADD CONSTRAINT PK_PRODUCT_PROD_ID PRIMARY KEY (PROD_ID);

-- CREATING ORDERS TABLE
CREATE TABLE ORDERS
(
ORDER_ID INTEGER IDENTITY(100, 2),
CUST_ID INTEGER NOT NULL,
PROD_ID INTEGER NOT NULL,
ORDER_DATE DATE NOT NULL
);

-- ADDING PK TO ORDERS TABLE
ALTER TABLE ORDERS
ADD CONSTRAINT PK_ORDERS_ORDER_ID PRIMARY KEY(ORDER_ID);

--FOREIGN KEY
--A COLUMN IN ONE TABLE THAT REFERS TO THE PRIMARY KEY COLUMN IN 
----ANOTHER TABLE.
-- IT IS USED TO CREATE RELATIONSHIPS BETWEEN TABLES AND ALSO 
-----ENSURE REFERENTIAL INTEGRITY.

--SYNTAX
--ALTER TABLE TABLE_NAME
--ADD CONSTRAINT CONSTRAINT_NAME FOREIGN KEY(COLUMN)
--REFERENCES PARENT_TABLE (COLUMN);

--ADDING FK CONSTRAINT TO ORDERS TABLE
ALTER TABLE ORDERS
ADD CONSTRAINT FK_ORDERS_CUST_ID FOREIGN KEY(CUST_ID)
REFERENCES CUSTOMER(CUST_ID);

--ADDING FK CONSTRAINT TO ORDERS TABLE
ALTER TABLE ORDERS
ADD CONSTRAINT FK_ORDERS_PROD_ID FOREIGN KEY (PROD_ID)
REFERENCES PRODUCT(PROD_ID);

--ADDING SSN COLUMN TO CUSTOMER
ALTER TABLE CUSTOMER
ADD SSN CHAR(9) NOT NULL;

--CHANGING SSN DATATYPE
ALTER TABLE CUSTOMER
ALTER COLUMN SSN VARCHAR(9);

---DROP (COLUMN)
-- ALTER TABLE TABLE_NAME
--DROP COLUMN COLUMN_NAME

--DROP (TABLE)
--DROP TABLE TABLE_NAME

--REMOVING SSN COLUMN
ALTER TABLE CUSTOMER
DROP COLUMN SSN;

-- CREATING ORDERS1 TABLE
CREATE TABLE ORDERS1
(
ORDER_ID INTEGER IDENTITY(100, 2),
CUST_ID INTEGER NOT NULL,
PROD_ID INTEGER NOT NULL,
ORDER_DATE DATE NOT NULL
);

--REMOVIONG ORDERS1 TABLE
DROP TABLE ORDERS1;

--RENAMING ORDERS TABLE TO ORDER
EXEC SP_RENAME 'ORDER', 'ORDERS';

--RENAMING ORDER DATE COLUMN
EXEC sp_rename 'dbo.ORDER.ORDER_DATE', 'ORDER_DT', 'COLUMN';


------09/08/2022-------
--UNIQUE CONSTRAINT ENSURES THAT ALL VALUES IN A COLUMN ARE DISTINCT.
----- THERE CAN BE MORE THAN ONE UNIQUE CONSTRAINT DEFINED ON TABLE.

-- ADDING UNIQUE CONSTRAINT TO PRODUCT NAME COLUMN
ALTER TABLE PRODUCT
ADD CONSTRAINT UQ_PRODUCT_P_NAME UNIQUE(P_NAME);

--CHECK CONSTRAINT IT VERIFIES OR VALIDATES THAT ALL THE VALUES IN A FIELD
-- SATISFIES A GIVEN CONDITION.

--- ADDING CHECK CONSTRAINT THAT VALIDATES PHONE NUMBER LENGHT
ALTER TABLE CUSTOMER
ADD CONSTRAINT CK_CUSTOMER_PHONE CHECK (LEN(PHONE) = 10);

---INDEXES ARE USED TO RETRIEVE DATA FROM DATABASES MORE QUICK, THEY HELP SPEED UP QUERIES.
----CLUSTERED 
--Whenever you apply clustered indexing in a table, it will perform sorting 
--in that table only. You can create only one clustered index in a table like primary key.
--Clustered index is as same as dictionary where the data is arranged by alphabetical order. 
--If you apply primary key to any column, then automatically it will become clustered index. 

----NONCLUSTERED
--is similar to the index of a book. The index of a book consists of a chapter name and page number, 
--if you want to read any topic or chapter then you can directly go to that page by using index of
-- that book. No need to go through each and every page of a book. 

---SYNTAX
--CREATE <CLUSTERED/ NONCLUSTERED> INDEX_NAME
--ON TABLE_NAME(COLUMN);

--ADDING INDEX ON CUST_ID COLUMN
CREATE NONCLUSTERED INDEX IX_PRODUCT_P_NAME
ON PRODUCT (P_NAME);

CREATE NONCLUSTERED INDEX IX_ORDERS_CUST_ID
ON ORDERS (CUST_ID);

CREATE CLUSTERED INDEX IX_ORDERS_CUST_ID1
ON ORDERS (CUST_ID);

--REMOVING INDEX FROM PRODUCT TABLE
DROP INDEX  PRODUCT.IX_PRODUCT_P_NAME;

DROP INDEX  IX_PRODUCT_P_NAME
ON PRODUCT;

--DML COMMANDS (DATA MANIPULATION LANGUAGE)
--INSERT -- POPULATE RECORDS
--UPDATE -- MODIFY AN EXISTING RECORD BASED ON A GIVEN CONDITION
--DELETE -- REMOVE EXISTING RECORDS BASED ON A GIVEN CONDITION.
---------ALL RECORDS IN TABLE IS REMOVED WHEN NO CONDITION IS DEFINED
--SELECT -- RETIREVE RECORDS FROM ONE OR MORE TABLES.

---INSERT
--SYNTAX
--INSERT INTO TABLE_NAME(COLUMN1, COLUMN2, COLUMN3, ...)
--VALUES
--('VALUE1', 'VALUE2', 'VALUE3'),
--('VALUE1', 'VALUE2', 'VALUE3'),
--('VALUE1', 'VALUE2', 'VALUE3'),
--('VALUE1', 'VALUE2', 'VALUE3'),
--('VALUE1', 'VALUE2', 'VALUE3');

--- POPULATING CUSTOMER TABLE
INSERT INTO CUSTOMER 
(CUST_ID, F_NAME, L_NAME, DOB, CITY, STATE, GENDER, PHONE)
VALUES
(1, 'JOHN', 'DOE', '05-20-1995', 'BALTIMORE', 'MD', 'M', '4109068975'),
(2, 'MARIA', 'AFOLABI', '09-01-1999', 'TAMPA', 'FL', 'F', '8137023478');

INSERT INTO CUSTOMER 
(CUST_ID, F_NAME, L_NAME, DOB, CITY, STATE, GENDER, PHONE)
VALUES
(4, 'UMAR', 'SMITH', '02-10-1995', 'COLUMBIA', 'MD', 'M', '4430985469');

--- POPULATING PRODUCT TABLE
INSERT INTO PRODUCT
(P_NAME, PRICE, SUPPLIER, QUANTITY)
VALUES
('MILO', 10.50, 'NESTLE', 27);

INSERT INTO PRODUCT
(P_NAME, PRICE, SUPPLIER, QUANTITY)
VALUES
('RICE', 30.99, 'SAMS CLUB', 27),
('SUGAR', 5.45, 'WALMART', 50),
('OIL', 15.90, 'SAMS CLUB', 72);

--POPULATING ORDERS TABLE
INSERT INTO ORDERS
(CUST_ID, PROD_ID, ORDER_DT)
VALUES
(4, 1000, '10-09-2021'),
(1, 1004, '01-15-2022');

INSERT INTO ORDERS
(CUST_ID, PROD_ID, ORDER_DT)
VALUES
(1, 2004, '01-15-2022');


-----09/12/2022--------
--UPDATE
--SYNTAX 
--UPDATE TABLENAME
--SET COLUMNNAME = 'VALUE'
--WHERE CONDITION

-- UPDATING CUSTOMER LAST NAME
UPDATE CUSTOMER
SET L_NAME = 'JONES'
WHERE CUST_ID = 1;

---ADDING LAST NAME COLUMN TO ORDERS TABLE
ALTER TABLE ORDERS
ADD CUST_LNAME VARCHAR(50);

--UPDATE CUSTOMER LAST NAME DYNAMICALY
UPDATE ORDERS
SET CUST_LNAME = CUSTOMER.L_NAME
FROM ORDERS, CUSTOMER
WHERE ORDERS.CUST_ID = CUSTOMER.CUST_ID;

----TRUNCATE
TRUNCATE TABLE ORDERS;

-- DELETE
-- REMOVING ORDER 104
DELETE 
FROM  ORDERS
WHERE ORDER_ID = 104;

---REMOVING ALL RECORDS FROM ORDERS TABLE
DELETE 
FROM  ORDERS;

--KEYED IN ORDER
--SELECT -- RETRIEVE THE DATA, LIST OF COLUMNS(DERIVED)
--FROM -- SPECIFY THE TABLE(S) WHERE COLUMNS RESIDE
--WHERE -- USED TO FILTER RECORDS ON A GIVEN CONDITION(NON-AGGREGATED COLUMNS)
--GROUP BY -- USED TO GROUP NON-AGGREGATED COLUMNS WHEN AN AGGREGATE FUCTION
			-- IS INTRODUCED AT THE SELECT.
--HAVING -- USED TO FILTER RECORDS ON A GIVEN CONDITION(AGGREGATED COLUMNS)
--ORDER BY -- USED TO ORDER RECORDS. BY DEFAULT ITS IN ASCENDING(ASC) 
	--ELSE DESCENDING(DESC)

---LOGICAL QUERY ORDER
--FROM
--WHERE
--GROUP BY
--HAVING
--SELECT
--ORDER BY

--AGGREGATE FUNCTIONS
--SUM() 
--COUNT()
--AVERAGE() / AVG()
--MAX()
--MIN()

---RETRIEVE THE MOST EXPENSIVE ORDER IN THE ORDERS TABLE
SELECT MAX(FREIGHT) AS MAXFREIGHT
FROM SALES.ORDERS;

-- RETREIVE THE TOTAL NUMBER OF CUSTOMERS 
SELECT COUNT(CUSTID) AS NUMOFCUSTOMERS
FROM SALES.CUSTOMERS;

--- RETRIEVE THE TOTAL SUM OF CUSTOMER FREIGHT
SELECT CUSTID, SUM(FREIGHT) AS TOTALFREIGHT
FROM SALES.ORDERS
GROUP BY CUSTID
ORDER BY CUSTID;

--DISTINCT -- ALLOW RETREIVAL OF NON DUPLICATED VALUES/ RECORDS
SELECT DISTINCT CUSTID 
FROM SALES.ORDERS;

--SQL OPERATORS
--AND  -- ALL CONDITIONS MUST BE TRUE
--OR -- AT LEAST ONE CONDITION MUST BE TRUE
--BETWEEN -- IS USED AS A SEARCH PREDICATE  FRO A RANGE OF ITEMS 
--		-- ALWAYS USED WITH AND OPERATOR
--IN -- ALLOWS TO CREATE A SET PREDICATE FOR A GROUP OF ITEMS
----LIKE -- ALLOWS TO PERFORM PATTERN SEARCH.
--		-- USED IN CUNJUCTION WITH A WILD CARD (%, _)
--= --- EQUAL TO
--<> OR != -- NOT EQUAL TO
--> -- GREATER THAN 
--< -- LESS THAN

-- RETRIEVE ORDERS PLACED  FROM JUNE 2006 TO MAY 2007
SELECT ORDERID, CUSTID, ORDERDATE 
FROM SALES.ORDERS
WHERE ORDERDATE BETWEEN '06-01-2006' AND '05-01-2007'

SELECT ORDERID, CUSTID, ORDERDATE 
FROM SALES.ORDERS
WHERE ORDERDATE >= '06-01-2006' AND ORDERDATE <= '05-01-2007'

-- RETRIEVE A LIST ORDERS OF ORDERS THAT FREIGHT IS LESS THAN $100 OR
--MORE THAN $500
SELECT ORDERID, CUSTID, ORDERDATE, FREIGHT 
FROM SALES.ORDERS
WHERE FREIGHT < 100 OR FREIGHT > 500
ORDER BY FREIGHT;

-----09/13/2022------




